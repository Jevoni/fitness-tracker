{"ast":null,"code":"import _slicedToArray from \"/Users/jalenjohnson/Desktop/ReactPortfolio/fitness-tracker/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"actions\", \"children\", \"defaultValue\", \"name\", \"onChange\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  var actions = props.actions,\n      children = props.children,\n      defaultValue = props.defaultValue,\n      nameProp = props.name,\n      onChange = props.onChange,\n      valueProp = props.value,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var rootRef = React.useRef(null);\n\n  var _useControlled = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValueState = _useControlled2[1];\n\n  React.useImperativeHandle(actions, function () {\n    return {\n      focus: function focus() {\n        var input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n        if (!input) {\n          input = rootRef.current.querySelector('input:not(:disabled)');\n        }\n\n        if (input) {\n          input.focus();\n        }\n      }\n    };\n  }, []);\n  var handleRef = useForkRef(ref, rootRef);\n\n  var handleChange = function handleChange(event) {\n    setValueState(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  var name = useId(nameProp);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: {\n      name: name,\n      onChange: handleChange,\n      value: value\n    },\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","PropTypes","FormGroup","useForkRef","useControlled","RadioGroupContext","useId","jsx","_jsx","RadioGroup","forwardRef","props","ref","actions","children","defaultValue","nameProp","name","onChange","valueProp","value","other","rootRef","useRef","controlled","default","setValueState","useImperativeHandle","focus","input","current","querySelector","handleRef","handleChange","event","target","Provider","role","process","env","NODE_ENV","propTypes","node","any","string","func"],"sources":["/Users/jalenjohnson/Desktop/ReactPortfolio/fitness-tracker/node_modules/@mui/material/esm/RadioGroup/RadioGroup.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"actions\", \"children\", \"defaultValue\", \"name\", \"onChange\", \"value\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/useId';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rootRef = React.useRef(null);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n\n  const handleChange = event => {\n    setValueState(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  const name = useId(nameProp);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: {\n      name,\n      onChange: handleChange,\n      value\n    },\n    children: /*#__PURE__*/_jsx(FormGroup, _extends({\n      role: \"radiogroup\",\n      ref: handleRef\n    }, other, {\n      children: children\n    }))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;"],"mappings":"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"},"metadata":{},"sourceType":"module"}