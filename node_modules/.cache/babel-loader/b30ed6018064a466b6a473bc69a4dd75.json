{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, exactProp, unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback } from '@mui/utils'; // TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n *\n * Demos:\n *\n * - [Click-Away Listener](https://mui.com/base/react-click-away-listener/)\n *\n * API:\n *\n * - [ClickAwayListener API](https://mui.com/base/api/click-away-listener/)\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      _props$disableReactTr = props.disableReactTree,\n      disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      onClickAway = props.onClickAway,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var activatedRef = React.useRef(false);\n  var syntheticEventRef = React.useRef(false);\n  React.useEffect(function () {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(function () {\n      activatedRef.current = true;\n    }, 0);\n    return function () {\n      activatedRef.current = false;\n    };\n  }, []);\n  var handleRef = useForkRef( // @ts-expect-error TODO upstream fix\n  children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  var handleClickAway = useEventCallback(function (event) {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    var insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    var doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target) || nodeRef.current.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  var createHandleSynthetic = function createHandleSynthetic(handlerName) {\n    return function (event) {\n      syntheticEventRef.current = true;\n      var childrenPropsHandler = children.props[handlerName];\n\n      if (childrenPropsHandler) {\n        childrenPropsHandler(event);\n      }\n    };\n  };\n\n  var childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(function () {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      var doc = ownerDocument(nodeRef.current);\n\n      var handleTouchMove = function handleTouchMove() {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return function () {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(function () {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      var doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return function () {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(children, childrenProps)\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   * @default false\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   * @default 'onClick'\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   * @default 'onTouchEnd'\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;","map":{"version":3,"names":["React","PropTypes","elementAcceptingRef","exactProp","unstable_ownerDocument","ownerDocument","unstable_useForkRef","useForkRef","unstable_useEventCallback","useEventCallback","jsx","_jsx","mapEventPropToEvent","eventProp","substring","toLowerCase","clickedRootScrollbar","event","doc","documentElement","clientWidth","clientX","clientHeight","clientY","ClickAwayListener","props","children","disableReactTree","mouseEvent","onClickAway","touchEvent","movedRef","useRef","nodeRef","activatedRef","syntheticEventRef","useEffect","setTimeout","current","handleRef","ref","handleClickAway","insideReactTree","insideDOM","composedPath","indexOf","contains","target","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","mappedTouchEvent","handleTouchMove","addEventListener","removeEventListener","undefined","mappedMouseEvent","Fragment","cloneElement","process","env","NODE_ENV","propTypes","isRequired","bool","oneOf","func"],"sources":["/Users/jalenjohnson/Desktop/ReactPortfolio/fitness-tracker/node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, exactProp, unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback } from '@mui/utils'; // TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n *\n * Demos:\n *\n * - [Click-Away Listener](https://mui.com/base/react-click-away-listener/)\n *\n * API:\n *\n * - [ClickAwayListener API](https://mui.com/base/api/click-away-listener/)\n */\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = 'onClick',\n    onClickAway,\n    touchEvent = 'onTouchEnd'\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []);\n  const handleRef = useForkRef( // @ts-expect-error TODO upstream fix\n  children.ref, nodeRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  const handleClickAway = useEventCallback(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current); // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      insideDOM = !doc.documentElement.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target) || nodeRef.current.contains( // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  const createHandleSynthetic = handlerName => event => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  const childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(children, childrenProps)\n  });\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   * @default false\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   * @default 'onClick'\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   * @default 'onTouchEnd'\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;"],"mappings":"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"},"metadata":{},"sourceType":"module"}